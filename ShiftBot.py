import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import datetime
import random

TOKEN = "YOUR-TOKEN"  # **Replace with your actual bot token**

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

# Global variables
people = []
last_assigned = {}
zones = ["–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∞", "–ö–æ—Ä–∏–¥–æ—Ä, —É–º—ã–≤–∞–ª—å–Ω–∏–∫", "–ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞, —Å–∞–Ω. –£–∑–ª—ã"]
schedule_days = 7  # Default schedule days


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ª—é–¥–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ txt.")


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global people
    try:
        file = await context.bot.get_file(update.message.document.file_id)
        file_content = (await file.download_as_bytearray()).decode("utf-8")
        people = [line.strip() for line in file_content.splitlines() if line.strip()]

        if people:
            await update.message.reply_text(
                "–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
                reply_markup=ReplyKeyboardMarkup([
                    ["3 –¥–Ω—è", "7 –¥–Ω–µ–π", "9 –¥–Ω–µ–π"],
                    ["14 –¥–Ω–µ–π", "21 –¥–µ–Ω—å", "30 –¥–Ω–µ–π"]
                ], resize_keyboard=True, one_time_keyboard=True)
            )
        else:
            await update.message.reply_text("–§–∞–π–ª –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ª—é–¥–µ–π.")

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")


async def handle_schedule_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global schedule_days
    user_choice = update.message.text

    if "–¥–Ω—è" in user_choice or "–¥–µ–Ω—å" in user_choice or "–¥–Ω–µ–π" in user_choice:
        days_str = user_choice.split()[0]
        try:
            schedule_days = int(days_str)
            await update.message.reply_text(
                f"–í—ã–±—Ä–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {schedule_days} –¥–Ω–µ–π.", reply_markup=ReplyKeyboardRemove()
            )
            await generate_schedule(update, context, schedule_days)
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")


async def generate_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE, days=7):
    global last_assigned
    available_people = people[:] 

    for day_offset in range(1, days + 1):
        current_date = datetime.date.today() + datetime.timedelta(days=day_offset)
        current_date_str = current_date.strftime("%d.%m.%Y")
        current_weekday = current_date.weekday()

        daily_available_people = [p for p in available_people if last_assigned.get(p, datetime.date.min) < current_date]
        if not daily_available_people:
            await update.message.reply_text(f"–ù–∞ {current_date_str} –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ª—é–¥–µ–π –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
            continue

        random.shuffle(daily_available_people)

        schedule_message = f"üì¢ –£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å, –Ω–∞–ø–æ–º–∏–Ω–∞—é –Ω–∞ {current_date_str} –¥–µ–∂—É—Ä—è—Ç:\n\n"

        if current_weekday == 1 or current_weekday == 3:  # Tuesday or Thursday
            if daily_available_people:
                duty_person = daily_available_people.pop()
                schedule_message += f"–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∞:\n{duty_person}\n\n"
                last_assigned[duty_person] = current_date
            else:
                schedule_message += "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∞: –ù–µ–∫–æ–º—É –¥–µ–∂—É—Ä–∏—Ç—å\n\n"
        else:  # Other days (No –ü–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∞)
            for zone in zones[1:]:  # Exclude "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∞"
                duty_people = []
                for _ in range(min(2, len(daily_available_people))):
                    duty_person = daily_available_people.pop()
                    duty_people.append(duty_person)
                    last_assigned[duty_person] = current_date
                schedule_message += f"{zone}:\n{', '.join(duty_people) or '–ù–µ–∫–æ–º—É –¥–µ–∂—É—Ä–∏—Ç—å'}\n\n"

        schedule_message += "–ö–æ–ª–ª–µ–≥–∏, –ø—Ä–æ—Å—å–±–∞ –æ—Ç–¥–µ–∂—É—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, –æ–± —É–±–æ—Ä–∫–µ –¥–æ–ª–æ–∂–∏—Ç—å. –ö–∞–∫ –ø—Ä–∏–Ω—è—Ç–æ?\n\n"
        await update.message.reply_text(schedule_message)



def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Document.TEXT, handle_document))
    application.add_handler(MessageHandler(filters.TEXT, handle_schedule_days))

    application.run_polling()


if __name__ == '__main__':
    main()